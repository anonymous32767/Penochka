module imagesUnfolding {Раскрытие изображений}\
{Развертка изображений которые обернуты ссылками, ведущими на оригиналы}\
{

	kernel ; dispatcher

	doc {Задача развертки изображения разбивается на две подзадачи: (а) 	  определить, что изображение, по которому кликнул пользователь, может быть развернуто и (б) собрать информацию, необходимую для развертывания и развернуть.
		 
		  Первая задача решается в обработчике события функцией @testThumb(elt)@ .}

	js {function testThumb (subj) {
      return subj.is('img')
         && ({jpeg:1,jpg:1,png:1,gif:1,tiff:1,bmp:1})
      [subj.closest('a').attr('href').
       replace(/^.*\.(\w+)$/,'$1').toLowerCase()]
   }}

	doc {Несмотря на страшный вид, в ней нет ничего сложного --- она проверяет, что (а) изображение обернуто ссылкой и (б) ссылка ведет на изображение.}

	doc {Задача разворота изображения решается следующим обрабом. В элементе    @img@ изображения создается атрибут @altimg@, содержащий html-код развернутого изображения. При необходимости развернуть/свернуть изображение оригинальные элемент и содержимое аттрибута меняются местами. Например, пусть у нас имеется некое разворачиваемое изображение @<img thumb>@ . Мы создаем код развернутой копии этого изображения @<img full>@ и помещаем в  аттрибут @altimg@ исходного: @<img thumb altimg="<img full>">@. А потом,   как уже говорилось, меняем их местами.

Алгоритм кажется сложноватым, особенно когда знаешь, что можно было бы просто изменять аттрибут @src@ . Однако на практике такой способ хуже, потому что изображение в этом случае обновится только после окончательной   загрузки полной копии. А этого приходится ждать, например когда грузится   анимированный gif. Во время же ожидания ничего не происходит, а подобные ситуации всегда некомфортны для пользователя.

Вышеописанное реализуется двумя функциями: @prepareFull(subj)@ и	  @toggleFull(subj)@ . Их работа понятна из исходного кода.}
	
	js {   function prepareFull (subj) {
      return '<img src="' + subj.closest('a').attr('href') + '" ' +
         'style="min-width:' + subj.attr('width') + 'px;' +
         'min-height:' + subj.attr('height') + 'px;" ' + 
			'class="penImageFull" >'
   }

   function toggleFull (subj) {
      if (!subj.attr('altimg'))
         var t = prepareFull(subj)
		else
         var t = subj.attr('altimg')
		
      subj.removeAttr('altimg')
      var alt = $(t).attr('altimg', subj.parent().html())
      subj.replaceWith(alt)
   }}

   doc {Обработчик события. Проверяет, что кликнуто именно левой кнопкой мыши и вызывает вышеописанные функции.}

	js {$.on(
      'click',
      function (e) {
         var subj = $(e.target)
         if (e.which == 1 && testThumb(subj)) {
				e.stopPropagation()
				e.preventDefault()
            toggleFull(subj)
            return null
         } else {
            return e
         }
      })}
}